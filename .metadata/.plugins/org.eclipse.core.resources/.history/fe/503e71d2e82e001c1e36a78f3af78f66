/*
 ============================================================================
 Name        : TP_2.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "utn.h"
#define ELEMENTS 1000
#define LENTEXT 51


struct{
	int id;
	char name[LENTEXT];
	char lastName[LENTEXT];
	float salary;
	int sector;
	int isEmpty;
}typedef Employee;

int initEmployees(Employee* list,int len);
int findFreeAddEmployee(Employee* list, int len,int lenStr,int* idAuto);
int findFreeEmployee(Employee* list, int len);
int addEmployee(Employee* list, int len, int id, char name[], char lastName[],float salary, int sector);
int findRemoveEmployee(Employee* list, int len);
int findEmployeeById(Employee* list, int len,int id);
int removeEmployee(Employee* list, int len, int id);
int sortEmployees(Employee* list, int len, int order);
int findmodifyEmployee(Employee* list, int len, int lenStr);
int modifyEmployee(Employee* list, int len, int id,int lenStr);
///asdf
int printEmployee(Employee list);
int printEmployees(Employee* list, int length);
int menu();

int main(void) {
	setbuf(stdout, NULL);
	Employee arrayEmployes[ELEMENTS]={
			{1001,"jony","alan",40000,1,0},
			{1002,"carla","zenitez",20000,2,0},
			{1003,"omar","zenitez",30000,1,0},
	};
	int idAutomatico=1004;
	char seguir='s';
	int opcion;
	int cargaEmpleado=0;
	initEmployees(arrayEmployes,ELEMENTS);
	do{
		system("cls");
		switch(menu()){

			case 1:
				 if(!findFreeAddEmployee(arrayEmployes,ELEMENTS,LENTEXT, &idAutomatico)){
					 cargaEmpleado++;
					 printf("Se cagaro el usuario exitosamente.\n");
				 }

				break;
			case 2:
				findmodifyEmployee(arrayEmployes,ELEMENTS,LENTEXT);
				break;
			case 3:
				findRemoveEmployee(arrayEmployes,ELEMENTS);
				break;
			case 4:
				printf("1-Modo ascendente.\n2- Modo descendente.\nIngrese una opcion: ");
				fflush("stdin");
				scanf("%d",&opcion);
				while(opcion!=1 && opcion!=0){
					printf("Vuelva a intentarlo. Ingrese una opcion: ");
					fflush("stdin");
					scanf("%d",&opcion);
				}
				sortEmployees(arrayEmployes,ELEMENTS,opcion);
				break;
			case 10:
				printEmployees(arrayEmployes,ELEMENTS);
				break;
			case 20:
				seguir='n';
				break;
			default:
				break;
		}
		system("pause");
	}while(seguir=='s');


	return EXIT_SUCCESS;
}
int initEmployees(Employee* list,int len){
	int todoOk=-1;
	if(list!=NULL && len>0){
		for(int i=3; i<len;i++){
			list[i].isEmpty=1;
		}
		todoOk=0;
	}
	return todoOk;
}
int findFreeAddEmployee(Employee* list, int len,int lenStr,int* idAuto){
	int todoOk=-1;
	if (list !=NULL && len>0 && lenStr>0){
		int id;
		char name[lenStr];
		char lastName[lenStr];
		float salary;
		int sector;
		char auxNum[10];

		if(findFreeEmployee(list, len)!=-1){
			printf("............Alta de Usuario...........\n\n");
			id=*idAuto;
			(*idAuto)++;
			printf("Ingrese el nombre del empleado: ");
			fflush(stdin);
			gets(name);
			while(!esSoloLetras(name)){
				printf("Valores invalidos. Ingrese el nombre del empleado: ");
				fflush(stdin);
				gets(name);
			}
			printf("Ingrese el apellido del empleado: ");
			fflush(stdin);
			gets(lastName);
			while(!esSoloLetras(lastName)){
				printf("Valores invalidos. Ingrese el apellido del empleado: ");
				fflush(stdin);
				gets(lastName);
			}
			printf("Ingrese el salario del empleado: ");
			fflush(stdin);
			gets(auxNum);
			while(!esPositivoFlotante(auxNum)){
				printf("Ingrese el salario del empleado: ");
				fflush(stdin);
				gets(auxNum);
			}
			salary=atof(auxNum);
			printf("Ingrese el sector del empleado (numerico): ");
			fflush(stdin);
			gets(auxNum);
			while(!esNumerico(auxNum)){
				printf("Valores invalidos. Ingrese el sector del empleado: ");
				fflush(stdin);
				gets(auxNum);
			}
			sector=atoi(auxNum);

			if(addEmployee(list, len, id,name, lastName, salary, sector)==-1){
				printf("No se pudieron cargar los valores.\n");
			}
		}
		else{
			printf("No hay espacio disponible.\n");
		}
		todoOk=0;
	}

	return todoOk;
}
int findFreeEmployee(Employee* list, int len){
	int indexLibre=-1;
	if (list !=NULL && len>0){
			for(int i =0; i<len; i++){
				if(list[i].isEmpty==1){
					indexLibre=i;
					break;
				}
			}
		}
	return indexLibre;
}

int addEmployee(Employee* list, int len, int id, char name[], char lastName[],float salary, int sector){
	int todoOk=-1;
	int indexLibre;

	if (list !=NULL && len>0){
		indexLibre=findFreeEmployee(list, len);
		if(indexLibre>-1){
			list[indexLibre].id=id;
			strcpy(list[indexLibre].name,name);
			strcpy(list[indexLibre].lastName,lastName);
			list[indexLibre].sector=sector;
			list[indexLibre].salary=salary;
			list[indexLibre].isEmpty=0;
			todoOk=0;
		}
	}
	return todoOk;
}
int findRemoveEmployee(Employee* list, int len){
	int todoOk=0;
	int indexInt;
	int indexLocalizado;
	char auxNumero[10];
	if(list!=NULL && len>0){
		if(printEmployees(list, len)==-1){
			printf("No su pudo mostrar la lista de empleados.\n");
		}
		printf("............Baja de Usuario...........\n\n");
		printf("Ingrese el id: ");
		fflush(stdin);
		gets(auxNumero);
		while(!esNumerico(auxNumero)){
			printf("Vuelva a intentarlo. Ingrese el id: ");
			fflush(stdin);
			gets(auxNumero);
		}
		indexInt=atoi(auxNumero);
		indexLocalizado=findEmployeeById(list, len,indexInt);
		if(indexLocalizado==-1){
			printf("No se hallo el id seleccioado,\n");
		}
		if(removeEmployee(list, len,indexLocalizado)==-1){
			printf("No se puedo borrar al usuario seleccionado.\n");
		}
		else{
			printf("Se ha borrado con exito.\n");
		}
	}
	return todoOk;
}
int findEmployeeById(Employee* list, int len,int id){
	int index=-1;
	if(list!=NULL && len>0 && id>=1000){
		for(int i=0;i<len;i++){
			if(list[i].id==id){
				index=i;
			}
		}
	}
	return index;
}
int removeEmployee(Employee* list, int len, int id)
{
	char confirmar;
	int todoOk=-1;
	if(list!=NULL && len>0 && id>-1){
		printf("Confirmar si que desea borrar el siguiente empleado(SI = s)\n");
		printf("ID\t    NOMBRE\t   APELLIDO\t SALARIO	SECCION\n");
		printEmployee(list[id]);
		printf("Confirme con una (s): ");
		fflush(stdin);
		scanf("%c", &confirmar);
		if (confirmar=='s'){
			list[id].isEmpty=1;
			todoOk=0;
		}
	}
	return todoOk;
}
int sortEmployees(Employee* list, int len, int order)
{
	int todoOk=0;
	Employee auxEmpleado;
	if(list!=NULL && len>0 && (order==1 || order==0)){
		for(int i=0; i<len-1;i++){
			for(int u=0; u<len-1;u++){
				if(order==1){
					if(strcmp(list[i].lastName,list[u].lastName)==-1){
						auxEmpleado=list[i];
						list[i]=list[u];
						list[u]=auxEmpleado;
					}
					else if(strcmp(list[i].lastName,list[u].lastName)==0){
						if(list[i].sector<list[u].sector){
							auxEmpleado=list[i];
							list[i]=list[u];
							list[u]=auxEmpleado;
						}
					}
				}
				if(order==0){
					if(strcmp(list[i].lastName,list[u].lastName)==1){
						auxEmpleado=list[i];
						list[i]=list[u];
						list[u]=auxEmpleado;
					}
					else if(strcmp(list[i].lastName,list[u].lastName)==0){
						if(list[i].sector>list[u].sector){
							auxEmpleado=list[i];
							list[i]=list[u];
							list[u]=auxEmpleado;
						}
					}
				}
			}
		}
	}
	return todoOk;
}
int findmodifyEmployee(Employee* list, int len, int lenStr){
	int todoOk=0;
	int indexInt;
	int indexLocalizado;
	char auxNumero[10];
	if(list!=NULL && len>0){
		if(printEmployees(list, len)==-1){
			printf("No su pudo mostrar la lista de empleados.\n");
		}
		printf("............Modificar de Usuario...........\n\n");
		printf("Ingrese el id: ");
		fflush(stdin);
		gets(auxNumero);
		while(!esNumerico(auxNumero)){
			printf("Vuelva a intentarlo. Ingrese el id: ");
			fflush(stdin);
			gets(auxNumero);
		}
		indexInt=atoi(auxNumero);
		indexLocalizado=findEmployeeById(list, len,indexInt);
		if(indexLocalizado==-1){
			printf("No se hallo el id seleccioado,\n");
		}
		if(modifyEmployee(list, len,indexLocalizado,lenStr)==-1){
			printf("No se puedo modificar al usuario seleccionado.\n");
		}
		else{
			printf("Se ha Modificado con exito.\n");
		}
	}
	return todoOk;
}
int modifyEmployee(Employee* list, int len, int idLoc,int lenStr){
	int todoOk=-1;
	if (list!=NULL && len>0){
		char name[lenStr];
		char lastName[lenStr];
		float salary;
		int sector;
		char auxNum[10];
		printf("Ingrese el nombre del empleado: ");
		fflush(stdin);
		gets(name);
		while(!esSoloLetras(name)){
			printf("Valores invalidos. Ingrese el nombre del empleado: ");
			fflush(stdin);
			gets(name);
		}
		printf("Ingrese el apellido del empleado: ");
		fflush(stdin);
		gets(lastName);
		while(!esSoloLetras(lastName)){
			printf("Valores invalidos. Ingrese el apellido del empleado: ");
			fflush(stdin);
			gets(lastName);
		}
		printf("Ingrese el salario del empleado: ");
		fflush(stdin);
		gets(auxNum);
		while(!esPositivoFlotante(auxNum)){
			printf("Ingrese el salario del empleado: ");
			fflush(stdin);
			gets(auxNum);
		}
		salary=atof(auxNum);
		printf("Ingrese el sector del empleado: ");
		fflush(stdin);
		gets(auxNum);
		while(!esNumerico(auxNum)){
			printf("Valores invalidos. Ingrese el sector del empleado: ");
			fflush(stdin);
			gets(auxNum);
		}
		sector=atoi(auxNum);

		strcpy(list[idLoc].name,name);
		strcpy(list[idLoc].lastName,lastName);
		list[idLoc].salary=salary;
		list[idLoc].sector=sector;
		todoOk=0;
	}
	return todoOk;
}
/// esta por ver si ponemos esto no
int printEmployee(Employee list)
{

	printf("%d\t%10s\t%10s\t$ %8.2f\t   %d\n",list.id,list.name,list.lastName,list.salary,list.sector);


 return 0;
}
int printEmployees(Employee* list, int length)
{
	int todoOk=-1;
	if(list!=NULL && length>0){
		printf("ID\t    NOMBRE\t   APELLIDO\t SALARIO	SECCION\n");
		printf("---------------------------------------------------------------\n");
		for(int i=0;i<length;i++){
			if(list[i].isEmpty==0){
				printEmployee(list[i]);
			}

		}
		todoOk=0;
	}


 return todoOk;
}
int menu(){
	int opcion;
	printf("1- Alta de empleado.\n");
	printf("2- Modificar empleado.\n");
	printf("3- Baja de empleado.\n");
	printf("4- Informar.\n");
	printf("10- Mostrar empleados.\n");
	printf("20- Salir.\n");
	printf("_______________________\n");
	printf("Elija una opcion: ");
	scanf("%d", &opcion);
	system("pause");
	system("cls");
	return opcion;
}
